<?php

/**
 * Install tasks for education_common.
 */
function education_common_install() {
  if (module_exists('overlay')) {
    module_disable(array('overlay'));
    drupal_uninstall_modules(array('overlay'));
  }
  if (module_exists('search')) {
    module_disable(array('search'));
    drupal_uninstall_modules(array('search'));
  }
}

/**
 * Enable education_person feature.
 */
function education_common_update_7001() {
  if (!module_exists('education_person')) {
    module_enable(array('education_person'));
  }
}

/**
 * Set Adminimal as admin theme.
 */
function education_common_update_7002() {
  variable_set('admin_theme', 'adminimal');
}

/**
 * Enable education_page and education_scholarships features.
 */
function education_common_update_7003() {
  if (!module_exists('education_page')) {
    module_enable(array('education_page'));
  }
  if (!module_exists('education_scholarships')) {
    module_enable(array('education_scholarships'));
  }
}

/**
 * Uninstall shortcut and toolbar.
 */
function education_common_update_7004() {
  module_disable(array('shortcut', 'toolbar'));
  drupal_uninstall_modules(array('shortcut', 'toolbar'));
}

/**
 * Enable Adminimal theme.
 */
function education_common_update_7005() {
  // Forgot to do this in update 7002.
  theme_enable(array('adminimal'));
}

/**
 * Enable education_degree_option and dependent features (education_academic_program, education_department).
 */
function education_common_update_7006() {
  if (!module_exists('education_degree_option')) {
    module_enable(array('education_degree_option'));
  }
}

/**
 * Enable education_pages.
 */
function education_common_update_7007() {
  if (!module_exists('education_pages')) {
    module_enable(array('education_pages'));
  }
}

/**
 * Uninstall escape_admin.
 */
function education_common_update_7008() {
  $module_list = array('escape_admin');
  module_disable($module_list, FALSE);
  drupal_uninstall_modules($module_list);
}

/**
 * Set education_radix as default theme.
 */
function education_common_update_7009() {
  theme_enable(array('education_radix'));
  variable_set('theme_default', 'education_radix');
}

/**
 * Create sidebar menu block.
 */
function education_common_update_7010() {
  if (!module_exists('menu_block')) {
    module_enable(array('menu_block'));
  }

  // Determine the delta of the new block.
  $block_ids = variable_get('menu_block_ids', array());
  $delta = empty($block_ids) ? 1 : max($block_ids) + 1;
  $form_state['values']['delta'] = $delta;

  // Save the new array of blocks IDs.
  $block_ids[] = $delta;
  variable_set('menu_block_ids', $block_ids);

  // Save the block configuration.
  variable_set("menu_block_{$delta}_title_link", 0);
  variable_set("menu_block_{$delta}_admin_title", 'Main menu (levels 2+)');
  variable_set("menu_block_{$delta}_parent", 'main-menu:0');
  variable_set("menu_block_{$delta}_level", '2');
  variable_set("menu_block_{$delta}_follow", 'active');
  variable_set("menu_block_{$delta}_depth", '3');
  variable_set("menu_block_{$delta}_depth_relative", 1);
  variable_set("menu_block_{$delta}_expanded", 1);
  variable_set("menu_block_{$delta}_sort", 0);

  // Run the normal new block submission.
  $query = db_insert('block')->fields(array('visibility', 'pages', 'custom', 'title', 'module', 'theme', 'region', 'status', 'weight', 'delta', 'cache'));
  foreach (list_themes() as $key => $theme) {
    if ($theme->status) {
      $query->values(array(
        'visibility' => 0,
        'pages' => '',
        'custom' => 0,
        'title' => '<none>',
        'module' => 'menu_block',
        'theme' => $theme->name,
        'region' => BLOCK_REGION_NONE,
        'status' => 0,
        'weight' => 0,
        'delta' => $delta,
        'cache' => DRUPAL_NO_CACHE,
      ));
    }
  }
  $query->execute();

  // Place the block for the education_radix theme.
  db_update('block')
    ->fields(array(
      'status' => 1,
      'region' => 'sidebar_first',
    ))
    ->condition(db_or()
      ->condition(db_and()
        ->condition('module', 'menu_block')
        ->condition('delta', $delta)
        ->condition('theme', 'education_radix')
      )
    )
    ->execute();
}

/**
 * Allow images to be categorized in the media library.
 */
function education_common_update_7011() {
  if (!module_exists('transliteration')) {
    module_enable(array('transliteration'));
  }

  if (!module_exists('media_browser_plus')) {
    module_enable(array('media_browser_plus'));
  }

  // Create the initial media folders.
  $new_terms = array(
    'Documents',
    'Images',
    'Videos',
    'Headers',
    'People',
  );

  // Load the media_folders vocabulary ID.
  $vid = taxonomy_vocabulary_machine_name_load('media_folders')->vid;

  // Create new terms from the $new_terms array.
  foreach ($new_terms as $item) {
    $new_term = new stdClass();
    $new_term->name = $item;
    $new_term->vid = $vid;

    $parent = '';

    switch ($item) {
      case 'Headers':
        $parent = taxonomy_get_term_by_name('Images', 'media_folders');
        break;

      case 'People':
        $parent = taxonomy_get_term_by_name('Images', 'media_folders');
        break;

      default:
        break;
    }

    if (!empty($parent)) {
      $tid = array_pop($parent)->tid;
      $new_term->parent = $tid;
    }

    taxonomy_term_save($new_term);
  }

  // A list of views to disable.
  $viewnames = array(
    'media_default',
  );

  // Grab list of views that are already disabled.
  $views_status = variable_get('views_defaults', array());

  // Add our views to be disabled to the list.
  foreach ($viewnames as $key => $viewname) {
    $views_status[$viewname] = TRUE;
  }

  // Reset the variable with the new list.
  variable_set('views_defaults', $views_status);

  // Empty cache now.
  if (function_exists('views_invalidate_cache')) {
    views_invalidate_cache();
  }

  // Build an array of plugins that should show up in the WYSIWYG.
  $education_wysiwyg_media_plugins = array(
    0 => 'upload',
    1 => 'media_browser_plus--media_browser_thumbnails',
    2 => 'media_internet',
  );

  // Set which plugins show up in the WYSIWYG.
  variable_set('media_wysiwyg_wysiwyg_browser_plugins', $education_wysiwyg_media_plugins);

  // Unrelated. Use Education theme's css in the WYSIWYG.
  variable_set('sitenow_wysiwyg_theme_css', '%bsites/education.uiowa.edu/themes/education_radix/assets/css/education_radix.style.css');
}

/**
 * Set education_radix theme settings.
 */
function education_common_update_7012() {
  $theme_settings = array(
    'toggle_logo' => 0,
    'toggle_name' => 0,
    'toggle_slogan' => 0,
    'toggle_node_user_picture' => 0,
    'toggle_comment_user_picture' => 0,
    'toggle_comment_user_verification' => 0,
    'toggle_favicon' => 0,
    'toggle_main_menu' => 0,
    'toggle_secondary_menu' => 0,
    'default_logo' => 0,
    'logo_path' => '',
    'logo_upload' => '',
    'default_favicon' => 0,
    'favicon_path' => '',
    'favicon_upload' => '',
    'jquery_update_jquery_version' => '',
  );

  variable_set('theme_education_radix_settings', $theme_settings);
}

/**
 * Enable education_pages.
 */
function education_common_update_7013() {
  if (!module_exists('webform')) {
    module_enable(array('webform'));
  }
  if (!module_exists('webform_validation')) {
    module_enable(array('webform_validation'));
  }
  if (!module_exists('hidden_captcha')) {
    module_enable(array('hidden_captcha'));
  }
}

/**
 * Enable WYSIWYG configuration forms.
 */
function education_common_update_7014() {
  variable_set('sitenow_wysiwyg_disable_forms', 0);
}

/**
 * Disable Administration: Node view.
 */
function education_common_update_7015() {
  // Grab list of views that are already disabled.
  $views_status = variable_get('views_defaults', array());

  // Add the view to be disabled to the list.
  $views_status['admin_views_node'] = TRUE;

  // Reset the variable with the new list.
  variable_set('views_defaults', $views_status);

  // Empty cache now.
  if (function_exists('views_invalidate_cache')) {
    views_invalidate_cache();
  }
}

/**
 * Enable education_audiences_views.
 */
function education_common_update_7016() {
  if (!module_exists('education_audiences_views')) {
    module_enable(array('education_audiences_views'));
  }
}

/**
 * Enable education_degree_option_views.
 */
function education_common_update_7017() {
  if (!module_exists('education_degree_option_views')) {
    module_enable(array('education_degree_option_views'));
  }
}

/**
 * Allow csv files to be uploaded.
 */
function education_common_update_7018() {
  $allowed_file_types = 'csv ' . variable_get('file_entity_default_allowed_extensions');
  variable_set('file_entity_default_allowed_extensions', $allowed_file_types);
}

/**
 * Re-generate path aliases for nodes.
 */
function education_common_update_7019(&$sandbox) {
  module_load_include('inc', 'pathauto');
  module_load_include('inc', 'pathauto.pathauto');

  if (!isset($sandbox['max'])) {
    $count_query = db_select('node', 'n');
    $count_query->addExpression('COUNT(n.nid)', 'count');
    $sandbox['max'] = $count_query->execute()->fetchField();
    $sandbox['position'] = 0;

    // Delete the existing node aliases.
    db_delete('url_alias')
      ->condition('source', 'node/%', 'LIKE')
      ->execute();

    // Set the default node alias pattern.
    variable_set('pathauto_node_pattern', '[node:menu-link:parents:join-path]/[node:title]');
  }

  // Get the id's of nodes to update aliases for.
  $limit = 200;
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->orderBy('n.nid')
    ->range($sandbox['position'], $limit)
    ->execute()
    ->fetchCol();

  // Update node aliases.
  pathauto_node_update_alias_multiple($nids, 'bulkupdate');
  unset($nids);
  $sandbox['position'] += $limit;

  if ($sandbox['max'] > 0 && $sandbox['max'] > $sandbox['position']) {
    $sandbox['#finished'] = $sandbox['position'] / $sandbox['max'];
  }
  else {
    $sandbox['#finished'] = 1;
  }
}

/**
 * Create menu block for Academic Programs, Centers, and Services.
 */
function education_common_update_7020() {
  // Set pages on which only the new menu block should be visible.
  $pages = <<<EDUCATION_COMMON_7020
academic-programs/*
centers/*
services/*
EDUCATION_COMMON_7020;

  // Remove the existing menu block from these pages.
  db_update('block')
    ->fields(array(
      'pages' => $pages,
    ))
    ->condition('module', 'menu_block')
    ->condition('delta', '1')
    ->execute();


  // Create sidebar menu block for Academic Programs, Centers, and Services.
  // Determine the delta of the new block.
  $block_ids = variable_get('menu_block_ids', array());
  $delta = empty($block_ids) ? 1 : max($block_ids) + 1;
  $form_state['values']['delta'] = $delta;

  // Save the new array of blocks IDs.
  $block_ids[] = $delta;
  variable_set('menu_block_ids', $block_ids);

  // Save the block configuration.
  variable_set("menu_block_{$delta}_title_link", 0);
  variable_set("menu_block_{$delta}_admin_title", 'Main menu (levels 2+, active trail only)');
  variable_set("menu_block_{$delta}_parent", 'main-menu:0');
  variable_set("menu_block_{$delta}_level", '2');
  variable_set("menu_block_{$delta}_follow", 0);
  variable_set("menu_block_{$delta}_depth", '0');
  variable_set("menu_block_{$delta}_depth_relative", 0);
  variable_set("menu_block_{$delta}_expanded", 0);
  variable_set("menu_block_{$delta}_sort", 0);

  // Run the normal new block submission.
  $query = db_insert('block')->fields(array('visibility', 'pages', 'custom', 'title', 'module', 'theme', 'region', 'status', 'weight', 'delta', 'cache'));
  foreach (list_themes() as $key => $theme) {
    if ($theme->status) {
      $query->values(array(
        'visibility' => 0,
        'pages' => '',
        'custom' => 0,
        'title' => '<none>',
        'module' => 'menu_block',
        'theme' => $theme->name,
        'region' => BLOCK_REGION_NONE,
        'status' => 0,
        'weight' => 0,
        'delta' => $delta,
        'cache' => DRUPAL_NO_CACHE,
      ));
    }
  }
  $query->execute();

  // Place the block for the education_radix theme.
  db_update('block')
    ->fields(array(
      'status' => 1,
      'region' => 'sidebar_first',
      'visibility' => 1, // Show only on specified pages.
      'pages' => $pages,
    ))
    ->condition(db_or()
      ->condition(db_and()
        ->condition('module', 'menu_block')
        ->condition('delta', $delta)
        ->condition('theme', 'education_radix')
      )
    )
    ->execute();
}
